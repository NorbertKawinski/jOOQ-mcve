/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.postgres.embeddables.records.CdRecord;
import org.jooq.mcve.java.postgres.tables.Test;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mcve.test.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>mcve.test.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>mcve.test.cdsimple1</code>.
     */
    public void setCdsimple1(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>mcve.test.cdsimple1</code>.
     */
    public Integer getCdsimple1() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>mcve.test.cdsimple2</code>.
     */
    public void setCdsimple2(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>mcve.test.cdsimple2</code>.
     */
    public Integer getCdsimple2() {
        return (Integer) get(2);
    }

    /**
     * Setter for the embeddable <code>mcve.cd</code>.
     */
    public void setCddomain1(CdRecord value) {
        set(3, value);
    }

    /**
     * Getter for the embeddable <code>mcve.cd</code>.
     */
    public CdRecord getCddomain1() {
        return (CdRecord) get(3);
    }

    /**
     * Setter for the embeddable <code>mcve.cd</code>.
     */
    public void setCddomain2(CdRecord value) {
        set(4, value);
    }

    /**
     * Getter for the embeddable <code>mcve.cd</code>.
     */
    public CdRecord getCddomain2() {
        return (CdRecord) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, Integer cdsimple1, Integer cdsimple2, CdRecord cddomain1, CdRecord cddomain2) {
        super(Test.TEST);

        setId(id);
        setCdsimple1(cdsimple1);
        setCdsimple2(cdsimple2);
        setCddomain1(cddomain1);
        setCddomain2(cddomain2);
        resetChangedOnNotNull();
    }
}
