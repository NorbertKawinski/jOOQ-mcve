/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables.records;


import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.postgres.embeddables.records.AuthorIdRecord;
import org.jooq.mcve.java.postgres.tables.Book;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mcve.book.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>mcve.book.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>mcve.book.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mcve.book.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for the embeddable <code>mcve.author_id</code>.
     */
    public void setAuthorId(AuthorIdRecord value) {
        set(2, value);
    }

    /**
     * Getter for the embeddable <code>mcve.author_id</code>.
     */
    public AuthorIdRecord getAuthorId() {
        return (AuthorIdRecord) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(UUID id, String title, AuthorIdRecord authorId) {
        super(Book.BOOK);

        setId(id);
        setTitle(title);
        setAuthorId(authorId);
        resetChangedOnNotNull();
    }
}
