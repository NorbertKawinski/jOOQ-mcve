/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables.records;


import java.time.LocalDate;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.postgres.embeddables.records.CountryIdRecord;
import org.jooq.mcve.java.postgres.tables.Author;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mcve.author.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>mcve.author.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>mcve.author.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mcve.author.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mcve.author.born</code>.
     */
    public void setBorn(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>mcve.author.born</code>.
     */
    public LocalDate getBorn() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for the embeddable <code>mcve.country_id</code>.
     */
    public void setCountryId(CountryIdRecord value) {
        set(3, value);
    }

    /**
     * Getter for the embeddable <code>mcve.country_id</code>.
     */
    public CountryIdRecord getCountryId() {
        return (CountryIdRecord) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(UUID id, String name, LocalDate born, CountryIdRecord countryId) {
        super(Author.AUTHOR);

        setId(id);
        setName(name);
        setBorn(born);
        setCountryId(countryId);
        resetChangedOnNotNull();
    }
}
