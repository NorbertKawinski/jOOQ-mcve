/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.mcve.java.postgres.embeddables.records.AuthorIdRecord;
import org.jooq.mcve.java.postgres.tables.Author;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorRecord extends UpdatableRecordImpl<AuthorRecord> implements Record2<AuthorIdRecord, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for the embeddable <code>mcve.author_id</code>.
     */
    public void setId(AuthorIdRecord value) {
        set(0, value);
    }

    /**
     * Getter for the embeddable <code>mcve.author_id</code>.
     */
    public AuthorIdRecord getId() {
        return (AuthorIdRecord) get(0);
    }

    /**
     * Setter for <code>mcve.author.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>mcve.author.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<AuthorIdRecord, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<AuthorIdRecord, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<AuthorIdRecord> field1() {
        return Author.AUTHOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Author.AUTHOR.NAME;
    }

    @Override
    public AuthorIdRecord component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public AuthorIdRecord value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public AuthorRecord value1(AuthorIdRecord value) {
        setId(value);
        return this;
    }

    @Override
    public AuthorRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AuthorRecord values(AuthorIdRecord value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorRecord
     */
    public AuthorRecord() {
        super(Author.AUTHOR);
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    public AuthorRecord(AuthorIdRecord id, String name) {
        super(Author.AUTHOR);

        setId(id);
        setName(name);
        resetChangedOnNotNull();
    }
}
